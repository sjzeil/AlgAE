/**
 * 
 */
package edu.odu.cs.AlgAE.Common.Communications;

import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;


/**
 * Messages sent to the client.
 * 
 * Client messages have a highly variable and sometimes complex structure.
 * 
 * @author zeil
 *
 */
public abstract class ClientMessage extends MessageBase {
	
	

	/**
	 * Construct a new client message
	 * 
	 * @param messageKind type of message
	 */
	public ClientMessage(String messageKind) {
		super(messageKind);
	}
	
	
	public abstract boolean equals (Object clientMessage);
	
	/**
	 * Converts the message to XML that can be shipped over a network
	 * (typically from a remote animation server).
	 * 
	 * This imposes some requirements on the subclasses of ClientMessage.
	 *   - They must provide a parameter-free constructor (though it need not
	 *        be a particularly useful one
	 *   - All data required to reconstruct must be accessible via get/set function pairs
	 *   
	 * @return XML encoding of the message
	 */
	public String toXML()
	{
		ByteArrayOutputStream byout = new ByteArrayOutputStream();
		XMLEncoder out = new XMLEncoder(new BufferedOutputStream(byout));
		out.writeObject(this);
		out.close();
		String XMLstr = byout.toString();
		return XMLstr;
	}
	
	/**
	 * Rebuilds a message from XML as generated by toXML() or an equivalent
	 * (typically from a remote animation server).
	 * 
	 * This imposes some requirements on the subclasses of ClientMessage.
	 *   - They must provide a parameter-free constructor (though it need not
	 *        be a particularly useful one
	 *   - All data required to reconstruct must be accessible via get/set function pairs
	 *   
	 * @param xml string containing the XML encoding of a client message 
	 * @return a client message
	 */
	public static ClientMessage fromXML(String xml)
	{
		XMLDecoder in = new XMLDecoder(new ByteArrayInputStream(xml.getBytes()));
		ClientMessage msg = (ClientMessage)in.readObject();
		in.close();
		return msg;
	}
	
	
	public String toString() {
		return toXML();
	}
	
}

<project name="AlgAE" 
	 default="publish-local" basedir="." 
	 xmlns:ivy="antlib:org.apache.ivy.ant"
	 xmlns:jacoco="antlib:org.jacoco.ant">
  
  <record name="ant.log" action="start" append="false"/>
  
  <description>
    AlgAE (Algorithm Animation Engine): Java Client and Server
  </description>
  
  <property file="${user.home}/ivy.properties"/>
  <property name="projectName" value="algae" />
  <property name="sharedPropertiesFile" location="../../shared.properties"/>
  <property file="${sharedPropertiesFile}"/>
  
  <tstamp>
    <format property="build.date" pattern="yyyy-MM-dd" locale="en,US" />
    <format property="build.dateTime" 
	    pattern="yyyy-MM-dd HH:mm" locale="en,US" />    
  </tstamp>
  <property name="configuration" value="${os.name}" />
  <property name="packageName" value="${projectName}-${build.version}" />
  
  
  <!-- === Directory Setup === -->
  
  <property name="compile.src" location="src/main/java" />
  <available file="${compile.src}" property="compile.src.exists" />
  <property name="compile.data" location="src/main/data" />
  <property name="compile.dest" location="target/classes" />
  <property name="data.dest" location="target/data" />
  <property name="test.src" location="src/test/java" />
  <available file="${test.src}" property="test.src.exists" />
  <property name="test.dest" location="target/test-classes" />
  <property name="test.reports" location="target/reports" />
  <property name="reports.dir" location="target/reports" />	
  <property name="reports.data.dir" location="target/report-data" />	
  <property name="webserver" value="atria.cs.odu.edu"/>
  <property name="website.path" value="/home/zeil/public_html/AlgAE/Reports"/>
  
  
  <!-- === Unit Test Setup === -->
  
  
  <fileset id="unitTestsExpectedToPass" dir="${test.dest}">
    <include name="**/Test*.class" />
    <exclude name="**/Test*$*.class" />
  </fileset>
  
  
  <!-- === Ivy Configuration Manager Setup === 
       See also ivy.xml, ivysettings.xml, forge350-settings.xml
  -->
  <property name="ivy.install.version" value="2.4.0-rc1"/>
  <property name="jsch.install.version" value="0.1.49"/>
  <property name="ivy.jar.dir" value="${basedir}/ivy"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
  <property name="jsch.jar.file" value="${ivy.jar.dir}/jsch.jar"/>
  <property name="build.dir" value="build"/>
  <property name="src.dir" value="src"/>
  
  <target name="download-ivy" unless="skip.download">
    <mkdir dir="${ivy.jar.dir}"/>
    <echo message="installing ivy..."/>
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
	 dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>
  
  <target name="install-ivy" depends="download-ivy"  unless="skip.download"
	  description="--> install ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
  </target>
  
  <target name="resolve-ivy" depends="install-ivy">
    <!-- ivy:settings file="${user.home}/ivysettings.xml"/ -->
  	<taskdef resource="org/apache/ivy/ant/antlib.xml" 
  	         uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  	<ivy:settings file="ivysettings.xml"/>
    <ivy:resolve/>

  	<!-- === Class Paths for Compilation and Execution === -->
    
    
    <ivy:cachepath conf="build" pathid="ivy.build.classpath"/>
    <ivy:cachepath conf="test" pathid="ivy.test.classpath"/>
    <ivy:cachepath conf="integration" pathid="ivy.integration.classpath"/>
    <ivy:cachepath conf="reports" pathid="ivy.reports.classpath"/>
    <ivy:cachepath conf="findbugs" pathid="ivy.findbugs.classpath"/>
    
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath refid="ivy.test.classpath"/>
    </taskdef>
    
  </target>  
  
  
  <path id="build.classpath">
    <path refid="ivy.build.classpath"/>
  </path>
  
  <!-- Classpath for compilation of project code -->
  <path id="compile.classpath">
    <pathelement location="${compile.dest}"/>
    <path refid="ivy.build.classpath"/>
  </path>
  
 
  <!-- Classpath for compilation of unit tests -->
  <path id="test-compile.classpath">
    <pathelement location="${compile.dest}" />
    <pathelement location="${test.dest}" />
    <path refid="ivy.test.classpath"/>
  </path>
  
  <!-- Classpath for execution of Unit tests -->
  <path id="test.classpath">
    <pathelement location="${compile.dest}" />
    <pathelement location="${test.dest}" />
    <path refid="ivy.test.classpath"/>
  </path>
  
  
  <!-- === Targets and Tasks === -->
  
  <!-- target name="setup" depends="resolve-ivy" -->
  <target name="setup" depends="resolve-ivy">
  </target>

  
  <target name="compile-source" depends="setup" 
	  description="Compile the main source code">
    <mkdir dir="${compile.dest}" />
    <javac srcdir="${compile.src}" 
	   destdir="${compile.dest}" 
	   classpathref="compile.classpath" 
	   source="1.7" target="1.7"
	   debug="true" includeantruntime="false"/>
  </target>
  
  
  <target name="compile-tests" depends="compile-source" unless="test.skip" 
	  description="Compile unit test code.">
    <mkdir dir="${test.dest}" />
    <javac srcdir="${test.src}" 
	   destdir="${test.dest}" 
	   classpathref="test-compile.classpath" debug="true"  
	   source="1.7" target="1.7"
	   includeantruntime="false"/>
  </target>
  
  <target name="run-tests" depends="compile-tests" 
	  if="test.src.exists" unless="test.skip"
	  description="Perform unit testing">
    <mkdir dir="${reports.data.dir}/junit"/>
    <jacoco:coverage destfile="target/jacoco.exec">
      <junit printsummary="on" haltonfailure="false" 
	     fork="true" forkmode="perTest">
	<classpath refid="test.classpath" />
	<formatter type="xml" />
	
	<batchtest todir="${reports.data.dir}/junit">
	  <fileset refid="unitTestsExpectedToPass" />
	</batchtest>
      </junit>
    </jacoco:coverage>
    <mkdir dir="${reports.dir}/junit"/>
    <junitreport todir="${reports.data.dir}/junit">
      <fileset dir="${reports.data.dir}/junit">
	<include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${reports.dir}/junit"
	      styledir="../junit-stylesheets"
	      />
    </junitreport>
    
  </target>
  	
	
  <target name="coverageReport" depends="run-tests,resolve-ivy" 
	  description="Prepare HTML summary of unit test coverage">
    <mkdir dir="${reports.dir}/jacoco"/>
    <jacoco:report>
      <executiondata>
	<file file="target/jacoco.exec"/>
      </executiondata>
      <structure name="Extract Core: test coverage report">
	<classfiles>
	  <fileset dir="target/classes"/>
	</classfiles>
	<sourcefiles encoding="UTF-8">
	  <fileset dir="src/main/java"/>
	</sourcefiles>
      </structure>
      <html destdir="${reports.dir}/jacoco"/>
    </jacoco:report>
  </target>
  
  <target name="javadoc" depends="setup" 
	  description="prepare Javadoc documentation">
    <mkdir dir="${reports.dir}/javadoc"/>
    <javadoc
	destdir="${reports.dir}/javadoc"
	classpathref="compile.classpath"
	author="true"
	version="true"
	use="true"
	windowtitle="Extract Core">
      
      <sourcefiles>
	<fileset dir="src/main/java" includes="**/*.java"/>
      </sourcefiles>
      
      <doctitle><![CDATA[<h1>AlgAE Client-Server</h1>]]></doctitle>
      <link offline="false" 
	    href="http://download.oracle.com/javase/6/docs/api/"/>
    </javadoc>
  </target>
	
  
  <target name="ivyReport" depends="resolve-ivy" 
	  description="generate Ivy dependency reports">
    <mkdir dir="${reports.dir}/ivy"/>
    <ivy:report toDir="${reports.dir}/ivy"/>
  </target>
  
  
  <target name="checkstyle" depends="resolve-ivy" 
	  description="run Checkstyle">
    <taskdef resource="checkstyletask.properties"
	     classpathref="ivy.reports.classpath"/>
    <mkdir dir="${reports.dir}/checkstyle"/>
    <mkdir dir="${reports.data.dir}/checkstyle"/>
    <checkstyle config="checkstyle.xml"
		failOnViolation="false"
		>
      <fileset dir="src/main/java" includes="**/*.java"/>
      <classpath path="target/classes"/>
      <!-- formatter type="plain"/ -->
      <formatter type="xml" 
		 tofile="${reports.data.dir}/checkstyle/checkstyle.xml"/>
    </checkstyle>
    <xslt in ="${reports.data.dir}/checkstyle/checkstyle.xml"
	  out="${reports.dir}/checkstyle/checkstyle.html"
	  style="../checkstyle-noframes.xsl">
      <!-- style>
	   <javaresource name="checkstyle-noframes.xsl" classpathref="ivy.reports.classpath"/>
	   </style -->
    </xslt>
  </target>
  
  <target name="findbugs" depends="compile-source" 
	  description="run FindBugs.">
    <taskdef classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
	     name="findbugs" classpathref="ivy.reports.classpath"/>
    <mkdir dir="${reports.dir}/findbugs"/>
    <mkdir dir="${reports.data.dir}/findbugs"/>
    <findbugs output="xml:withMessages" 
	      classpathref="ivy.reports.classpath" 
	      pluginList=""
	      outputFile="${reports.data.dir}/findbugs/findbugs.xml"
	      >
      <auxclasspath refid="test.classpath"/>
      <sourcepath path="src/main/java"/>
      <class location="target/classes"/>
    </findbugs>
    
    <xslt in ="${reports.data.dir}/findbugs/findbugs.xml"
	  out="${reports.dir}/findbugs/findbugs.html">
      <style>
	<javaresource name="fancy.xsl" 
		      classpathref="ivy.findbugs.classpath"/>
      </style>
    </xslt>
  </target>
  
  
  <target name="reports" 
	  depends="javadoc,ivyReport,coverageReport,checkstyle,findbugs" 
	  description="Generate project reports">
  </target>
  
	
 	
  <target name="publish-reports" depends="reports" 
	  description="send project reports to web server">
    <tar destfile="target/project-reports.tz" compression="gzip">
      <tarfileset dir="target">
	<include name="project-reports/**/*"/>
      </tarfileset>
    </tar>
    <input message="login name for ${webserver}:" addproperty="scp.login"/>
    <input message="password for ${webserver}:" addproperty="scp.password"/>
    <scp file="target/project-reports.tz" sftp="true" 
	 remoteToDir="${scp.login}:${scp.password}@${webserver}:${website.path}"/>
    <sshexec host="${webserver}" username="${scp.login}" password="${scp.password}" 
	     command="cd ${website.path}; tar xzf project-reports.tz"/>
  </target>
  

  <target name="package" depends="run-tests" description="prepare the Jar file containing the binary library">
    <jar destfile="target/${projectName}.jar">
      <fileset dir="${compile.dest}">
      </fileset>
      <fileset dir="src/main/resources">
      </fileset>
      <fileset dir="${compile.src}"/>
      <!--
	  <manifest>
	  <attribute name="Main-Class" value="edu.odu.cs.extract.Launcher" />
	  </manifest>
      -->
    </jar>
    
    <jar destfile="target/${projectName}-src.jar">
      <fileset dir="${compile.src}">
      </fileset>
    </jar>
    <!--
	<zip basedir="${data.dest}" destfile="${target}/${projectName}-${build.version}.zip" />
	<copy toDir="${target}/lib" overwrite="false" flatten="true">
	<fileset refid="ThirdPartyJarsToDeploy"/>
	</copy>
    -->
  </target>
  
  <target name="build" depends="package,reports" 
	  description="generate software, run tests, and prepare reports">
  </target>
  
  <target name="pre-publish" depends="package,install-ivy">
    <ivy:resolve/>
  </target>
  
  <target name="publish-local" depends="pre-publish" description="Publish the binary library in the default local repository">
    <ivy:publish resolver="local"
		 pubrevision="${build.version}"
		 overwrite="true"
		 >
      <artifacts pattern="target/[artifact].[ext]"/>
    </ivy:publish>
  </target>
  
  <!--
    <target name="publish" depends="pre-publish" 
            description="Publish the binary library on the Forge350 repository">
    <ivy:publish resolver="archiva-publish"
         pubrevision="${version}"
		 status="release"
		 update="true"
		 overwrite="true"
		 publishivy="true">
      <artifacts pattern="target/[artifact].[ext]"/>
    </ivy:publish>
  </target>
  -->
	
  <target name="clean" description="Remove all normal build products">
    <delete dir="target"/>
  </target>
  
  <target name="cleaner" depends="clean" 
	  description="Remove all normal build products and all downloaded 3rd party libraries">
  </target>

  <target name="cleanest" depends="cleaner" 
	  description="Remove all normal build products, all downloaded 3rd party libraries, and the Ivy jars">
    <delete dir="ivy"/>
  </target>



</project>

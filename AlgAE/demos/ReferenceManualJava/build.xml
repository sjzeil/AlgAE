<project name="AlgAE Demos from reference manual" 
	 default="build" basedir="." 
	 xmlns:ivy="antlib:org.apache.ivy.ant"
	 xmlns:jacoco="antlib:org.jacoco.ant">

  <record name="ant.log" action="start" append="false" />
	
  <description>
    AlgAE (Algorithm Animation Engine): Java examples for Reference Manual
  </description>

  <property name="projectName" value="algae-jrefman" />
  <property file="../../shared.properties"/>

  <property name="organization" value="edu.odu.cs.algae" />
  <property name="mainClassName" value="edu.odu.cs.AlgAE.Demos.SortingDriver" />
	
  <tstamp>
    <format property="build.date" pattern="yyyy-MM-dd" locale="en,US" />
    <format property="build.dateTime" 
	    pattern="yyyy-MM-dd HH:mm" locale="en,US" />    
  </tstamp>
  <property name="configuration" value="${os.name}" />
  <property name="packageName" value="${projectName}-${version}.jar" />
  

  <!-- === Directory Setup === -->

  <property name="compile.src" location="src/main/java" />
  <available file="${compile.src}" property="compile.src.exists" />
  <property name="compile.data" location="src/main/data" />
  <property name="compile.dest" location="target/classes" />
  <property name="data.dest" location="target/data" />
  <property name="test.src" location="src/test/java" />
  <available file="${test.src}" property="test.src.exists" />
  <property name="test.dest" location="target/test-classes" />
  <property name="test.reports" location="target/test_reports" />
  <property name="reports.dir" location="target/reports" />	
  <property name="reports.data.dir" location="target/report-data" />
	
  <!-- Deployment Information -->
  <property name="deploy.dest" location="/home/zeil/public_html/AlgAE/$projectName}"/>
  <property name="developersKeystore" location="../../devKeystore"/>
  <property name="deploymentKeystore" location="${user.dir}/keystore"/> <!-- move to external property file? -->
  <available file="${deploymentKeystore}" property="keystore.exists" />
	  

  <!-- === Unit Test Setup === -->
	

  <fileset id="unitTestsExpectedToPass" dir="${test.dest}">
    <include name="**/Test*.class" />
    <exclude name="**/Test*$*.class" />
  </fileset>

 
  <!-- === Ivy Configuration Manager Setup === 
       See also ivy.xml, ivysettings.xml, forge350-settings.xml
  -->
  <property name="ivy.install.version" value="2.4.0-rc1"/>
  <property name="jsch.install.version" value="0.1.49"/>
  <property name="ivy.jar.dir" value="${basedir}/ivy"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
  <property name="jsch.jar.file" value="${ivy.jar.dir}/jsch.jar"/>
  <property name="build.dir" value="build"/>
  <property name="src.dir" value="src"/>

  <target name="download-ivy" unless="skip.download">
    <mkdir dir="${ivy.jar.dir}"/>
    <echo message="installing ivy..."/>
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
	 dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="download-jsch" unless="skip.download">
    <mkdir dir="${ivy.jar.dir}"/>
    <echo message="installing jsch..."/>
    <get src="http://repo1.maven.org/maven2/com/jcraft/jsch/${jsch.install.version}/jsch-${jsch.install.version}.jar" 
	 dest="${jsch.jar.file}" usetimestamp="true"/>
  </target>
	
  <target name="install-jsch" depends="download-jsch">
  </target>
	
  <target name="install-ivy" depends="download-ivy"  unless="skip.download"
	  description="--> install ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" 
	     uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <target name="resolve-ivy" depends="install-ivy" description="Resolve library dependencies">
    <!-- ivy:settings file="${user.home}/ivysettings.xml"/ -->
  	<ivy:settings file="ivysettings.xml"/>
    <ivy:resolve/>
  	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
  		<classpath refid="test.classpath"/>
  	</taskdef>
  	
  	<ivy:cachepath conf="build" pathid="ivy.build.classpath"/>
  	<ivy:cachepath conf="test" pathid="ivy.test.classpath"/>
  </target>

  <!-- === Class Paths for Compilation and Execution === -->

	
  <!-- Classpath for compilation of project code -->
  <path id="compile.classpath">
    <pathelement location="${compile.dest}"/>
    <path refid="ivy.build.classpath"/>
  </path>
	  
 
  <!-- Classpath for compilation of unit tests -->
  <path id="test-compile.classpath">
    <pathelement location="${compile.dest}" />
    <pathelement location="${test.dest}" />
    <path refid="ivy.test.classpath"/>
  </path>
	  
  <!-- Classpath for execution of Unit tests -->
  <path id="test.classpath">
    <pathelement location="${compile.dest}" />
    <pathelement location="${test.dest}" />
    <path refid="ivy.test.classpath"/>
  </path>



  <!-- === Targets and Tasks === -->

  <!-- target name="setup" depends="resolve-ivy" -->
  <target name="setup" depends="resolve-ivy">
  </target>

  
  <target name="compile-source" depends="setup" 
  	description="Compile the main source code">
    <mkdir dir="${compile.dest}" />
    <javac srcdir="${compile.src}" destdir="${compile.dest}" classpathref="compile.classpath" 
	   debug="true" includeantruntime="false"/>
  </target>
  
  
  <target name="test-compile" depends="compile-source" if="test.src.exists" unless="test.skip" 
  	description="Compile unit test code.">
    <mkdir dir="${test.dest}" />
    <javac 
    	srcdir="${test.src}" 
    	destdir="${test.dest}" 
    	classpathref="test-compile.classpath" debug="true"  
    	includeantruntime="false"/>
  </target>

  <target name="run-tests" depends="test-compile" if="test.src.exists" unless="test.skip"
  	description="Perform unit testing">
    <mkdir dir="${test.reports}" />
  	<mkdir dir="${test.reports}/details"/>
    <junit printsummary="on" 
    	haltonfailure="true" 
    	fork="true" forkmode="perTest">
      <classpath refid="test.classpath" />
      <jvmarg value="-Djava.library.path=${thirdPartyLibs}" />
      <formatter type="xml" />
      
      <batchtest todir="${test.reports}/details">
	<fileset refid="unitTestsExpectedToPass" />
      </batchtest>
    </junit>
  </target>
  	

  <target name="build" depends="run-tests" 
  	description="prepare the Jar file containing the binary library">
    <jar destfile="target/${projectName}.jar">
      <fileset dir="${compile.dest}">
      </fileset>
      <zipfileset src="lib/algae-client-${version}.jar">
      	<include name="**/*"/>
      	<exclude name="META-INF/**/*"/>
      </zipfileset>
      <zipfileset includes="**/*.class" src="lib/algae-jserver-${version}.jar"/>
      <fileset dir="${compile.src}"/>
      <manifest>
	     <attribute name="Main-Class" value="${mainClassName}" />
      </manifest>
    </jar>
  	<!-- We immediately self-certify the jar because browsers are so painful about loading
  	     applets from file:// locations, making debugging painful -->
  	<copy file="target/${projectName}.jar" tofile="target/selfcert-${projectName}.jar"/>
  	<signjar jar="target/selfcert-${projectName}.jar"
  	         keystore="${developersKeystore}"
  	         alias="devKey" 
  	         storepass="developer" 
  	         verbose="true"/>
  	<copy toDir="target">
  		<fileset dir="src/main/data">
  			<include name="**/*.html"/>
  			<include name="**/*.jnlp"/>
  		</fileset>
  		<filterset>
  			<filter token="JAR" value="selfcert-${projectName}.jar"/>
  			<filter token="MAINCLASS" value="${mainClassName}"/>
  			<filter token="PROJECT" value="${projectName}"/>
  			<filter token="ORG" value="${organization}"/>
  		</filterset>
  	</copy>
  	<copy toFile="javahelp.jar">
  		<fileset dir="lib">
  			<include name="javahelp-*.jar"/> 
  			<exclude name="javahelp*-*sources.jar"/> 
		    <exclude name="javahelp*-*javadoc.jar"/> 
  		</fileset>
  	</copy>	
  </target>
  	
  <target name="sign-jar" depends="build" if="keystore-exists">
  	<input message="Please enter password for keystore ${keystore}:" 
  		addproperty="keystore.password" />
  	<signjar 
  		jar="target/${projectName}.jar" 
  		alias="${keystore}" 
  		storepass="${keystore.password}" 
  		verbose="true"/>
  </target>  	
  
  <target name="package" depends="sign-jar" 
  	description="Prepare zip file with signed jar and accompanying html file">
  	<copy toDir="target">
  		<fileset dir="src/main/data">
  			<include name="**/*.html"/>
  			<include name="**/*.jnlp"/>
  		</fileset>
  		<filterset>
  			<filter token="JAR" value="${projectName}.jar"/>
  			<filter token="MAINCLASS" value="${mainClassName}"/>
  			<filter token="PROJECT" value="${projectName}"/>
  			<filter token="ORG" value="${organization}"/>
  		</filterset>
  	</copy>
    <zip basedir="target" destfile="target/${projectName}-${version}.zip">
    	<fileset dir="target">
    		<include name="${projectName}.jar"/>
    		<include name="javahelp.jar"/>
    		<include name="*.html"/>
	        <include name="*.jnlp"/>
    	</fileset>
    </zip>
  </target>
	

  <target name="clean" description="Remove all normal build products">
    <delete dir="target"/>
  </target>

  <target name="cleaner" depends="clean" description="Remove all normal build products and all downloaded 3rd party libraries">
    <delete dir="lib"/>
  </target>

  <target name="cleanest" depends="cleaner" 
	  description="Remove all normal build products, all downloaded 3rd party libraries, and the Ivy jars">
    <delete dir="ivy"/>
  </target>



</project>
